
celltype = register
 value : natural
 next, previous: ^celltype
endregister

position = ^celltype

class dlist:
  private head, last: position
  private swapped: boolean
  public void insert(p:position, n:natural)
  public natural extract(p: position)
  public void swap()
  public void makenull()
  public boolean empty()
  public boolean isSwapped()
  public natural[] list()
  public void cut(p:position)
  public position getHead()
  public position getLast()
endclass

public void dlist::insert(p:position, n:natural)
	aux:position
	aux^.value := n						{Prepare new cell}
	if p = null then					{Check if the position is valid}
		error("Selected position does not exist!")	{If not, throw error}
	
	aux^.next := p						{Get position after the one we are inserting}
	aux^.previous := p^.previous				{Get position before the one in which we are inserting}
	p^.previous = aux					{Link p to aux}
	if this.head = null then this.head := aux		{Correct anything that may be wrong}
	if this.last = null then this.last := aux
endmethod

public natural dlist::extract(p:position)
	aux: natural
	if p = null then error("Invalid position selected.")	{Check for null to throw error}
	
	aux := p^.value						{Get value in p}
	p^.next^.previous = p^.previous				{Extract p}
	p^previous^.next = p^.next
	dispose(p)						{Free p}
	return aux						{Return value}
endmethod

public void dlist::swap()
	{Invert the value of swapped}
	if this.swapped then this.swapped = false
	else this.swapped = true
endmethod

public void dlist::makenull()
	while not this.empty()
		this.extract(this.head)
	endwhile
endmethod

public boolean dlist::empty()
	return head = last = null
endmethod

public boolean dlist::isSwapped()
	return swapped
endmethod

public natural[] dlist::list()
	if this.empty then return null
	aux: natural[]
	aux2: position
	iterator: integer
	aux2:=this.head
	iterator := 0
	
	while not aux2 = null			{Iterate through list}
		aux[iterator] := aux2^.value	
		aux2 := aux2^.next
		iterator := iterator + 1
	endwhile
	
	return aux
endmethod

public void cut(p:position)
	aux, aux2: position
	if p = null then error("Position could not be found.")
	last:= p^.previous
	aux := p
	
	while aux != null
		aux2 := aux^.next
		dispose(aux)
		aux := aux2
	endwhile
endmethod

public position getHead()
	return this.head
endmethod

public position getLast()
	return this.last
endmethop